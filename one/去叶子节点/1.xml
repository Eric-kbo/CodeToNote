<ul>
<li><ul>
<li>Web前端
<ul>
<li>前端开发工具</li>
<li>SEO</li>
</ul>
</li>
<li>HTML + CSS
<ul>
<li>HTML简介</li>
<li>HTML标签详解</li>
<li>标签语义化</li>
<li>CSS概述</li>
<li>CSS属性</li>
<li>CSS样式的类型</li>
<li>CSS选择器</li>
<li>CSS背景</li>
<li>元素的显示模式</li>
<li>CSS伪类</li>
<li>字体相关属性</li>
<li>盒子模型</li>
<li>margin</li>
<li>padding</li>
<li>浮动</li>
<li>定位</li>
<li>CSS相关案例</li>
</ul>
</li>
<li>HTML5 + CSS3
<ul>
<li>HTML5新增标签</li>
<li>HTML5多媒体</li>
<li>HTML5音频播放</li>
<li>HTML5视频播放</li>
<li>HTML5DOM扩展</li>
<li>HTMl5自定义属性</li>
<li>地理定位</li>
<li>文件读取</li>
<li>元素拖拽</li>
<li>应用缓存</li>
<li>历史管理</li>
<li>web存储</li>
<li>CSS3选择器</li>
<li>CSS3新属性</li>
<li>2D转换与过渡</li>
<li>3D转换</li>
<li>动画</li>
<li>Web字体</li>
<li>Flex弹性布局</li>
</ul>
</li>
<li>JavaScript + jQuery
<ul>
<li>JavaScript
<ul>
<li>JavaScript概述</li>
<li>数据类型</li>
<li>流程控制</li>
<li>算法基础</li>
<li>企业编程规范</li>
<li>JavaScript内置对象常用方法</li>
<li>对象的创建方式</li>
<li>JavaScript中的对象</li>
<li>面向对象</li>
<li>原型</li>
<li>作用域链</li>
<li>函数的调用方式及this指向</li>
<li>正则表达式</li>
<li>JavaScript高级
<ul>
<li>递归与预解析</li>
<li>数据类型</li>
<li>函数</li>
<li>词法分析</li>
<li>作用域链</li>
<li>事件编程</li>
<li>canvas绘图</li>
<li>面向对象</li>
<li>JSON对象</li>
<li>原型链</li>
<li>设计模式</li>
<li>正则表达式</li>
</ul>
</li>
<li>JavaScript原理探究
<ul>
<li>原型</li>
<li>原型链</li>
<li>继承</li>
<li>闭包</li>
<li>ES5</li>
<li>ES6</li>
</ul>
</li>
</ul>
</li>
<li>jQuery
<ul>
<li>jQuery简介</li>
<li>jQuery的优势</li>
<li>jQuery选择器</li>
<li>jQuery中的动画</li>
<li>jQuery插件</li>
<li>jQueryUI</li>
<li>jQuery编程思想</li>
<li>链式编程和隐式迭代</li>
<li>编写jQuery插件</li>
<li>jQuery选择器</li>
<li>属性操作</li>
<li>事件编程</li>
<li>jQuery特效</li>
<li>文档处理</li>
<li>插件机制</li>
<li>jQuery中的Ajax</li>
<li>开源jQuery项目实践</li>
</ul>
</li>
</ul>
</li>
<li>PHP +MySQL
<ul>
<li>搭建环境
<ul>
<li>PHP简介</li>
<li>WEB程序的访问流程</li>
<li>安装Apache</li>
<li>MySQL</li>
<li>PHP7</li>
<li>配置虚拟主机</li>
</ul>
</li>
<li>PHP7基础
<ul>
<li>变量和常量</li>
<li>数据类型</li>
<li>运算符</li>
<li>流程控制</li>
<li>函数</li>
<li>字符串</li>
<li>数组</li>
<li>PSR规范</li>
<li>B/S结构</li>
<li>参数传递GET/POST</li>
<li>动态网站</li>
<li>后台接口开发</li>
<li>分支循环语句</li>
</ul>
</li>
<li>MySQL数据库
<ul>
<li>MySQL简介</li>
<li>基础SQL操作</li>
<li>字符集</li>
<li>列类型</li>
<li>类属性</li>
<li>表关系</li>
<li>高级查询</li>
<li>外键</li>
<li>范式</li>
<li>用户管理</li>
<li>权限管理</li>
<li>数据备份与还原</li>
</ul>
</li>
<li>MySQL优化
<ul>
<li>MySQL优化概述</li>
<li>MySQL存储引擎</li>
<li>列类型的选择</li>
<li>数据库设计三范式与逆范式</li>
<li>MySQL中的执行计划</li>
<li>数据库中索引的设计</li>
<li>MySQL中的其他功能</li>
<li>MySQL分表技术</li>
<li>Sphinx</li>
<li>读写分离</li>
</ul>
</li>
<li>表单传值
<ul>
<li>表单传值的方式</li>
<li>PHP接收数据的三种方式</li>
<li>PHP处理复选框数据</li>
<li>文件上传</li>
</ul>
</li>
<li>MySQLi扩展
<ul>
<li>基本操作</li>
<li>执行增删改操作</li>
<li>执行查询操作</li>
<li>与MySQLi相关的函数</li>
<li>MySQLi扩展应用案例</li>
</ul>
</li>
<li>文件编程
<ul>
<li>文件操作的分类</li>
<li>目录操作</li>
<li>文件操作</li>
<li>文件下载</li>
</ul>
</li>
<li>会话技术
<ul>
<li>会话技术概述</li>
<li>Cookie与Session的区别</li>
<li>Cookie原理</li>
<li>Cookie操作</li>
<li>Session原理</li>
<li>Session操作</li>
<li>垃圾回收机制</li>
</ul>
</li>
<li>GD图像处理
<ul>
<li>GD库概述</li>
<li>GD画布实现</li>
<li>验证码</li>
<li>缩略图</li>
<li>水印图</li>
</ul>
</li>
<li>面向对象
<ul>
<li>面向对象概述</li>
<li>面向对象实现</li>
<li>封装</li>
<li>继承</li>
<li>多态</li>
<li>对象遍历</li>
<li>对象序列化</li>
<li>反射机制</li>
<li>命名空间</li>
<li>Trait新特性</li>
</ul>
</li>
<li>PDO扩展
<ul>
<li>PDO简介</li>
<li>PDO类</li>
<li>PDOStatement类</li>
<li>PDO预处理</li>
<li>PDO事务处理</li>
<li>PDO异常处理</li>
<li>PDO属性</li>
<li>封装PDO类</li>
</ul>
</li>
<li>Smarty
<ul>
<li>Smarty概述</li>
<li>模板设计</li>
<li>程序设计</li>
</ul>
</li>
<li>ThinkPHP5.0
<ul>
<li>ThinkPHP5框架概述</li>
<li>基础</li>
<li>架构</li>
<li>路由</li>
<li>控制器</li>
<li>视图</li>
<li>模型</li>
<li>项目实用项</li>
</ul>
</li>
<li>RESTful
<ul>
<li>RESTful概述</li>
<li>HTTP协议</li>
<li>RESTful API设计六要素</li>
<li>编写API接口文档</li>
<li>使用Lumen实现RESTful</li>
</ul>
</li>
<li>MVC设计模式
<ul>
<li>MVC设计模式</li>
<li>搭建自定义MVC框架</li>
</ul>
</li>
<li>博客项目
<ul>
<li>项目开发流程</li>
<li>数据表数据</li>
<li>后台实现</li>
<li>前台实现</li>
<li>扩展功能</li>
</ul>
</li>
<li>数据表设计、后台设计、前台设计、会员设计、购物车设计、订单设计、接口设计（微信/支付宝、短信、QQ登录、邮件、地图、物流）、静态化</li>
<li>PHP+Swoole多进程爬虫
<ul>
<li>Swoole概述</li>
<li>Server</li>
<li>Client</li>
<li>Process</li>
<li>AsyncIO</li>
<li>Memory</li>
<li>HttpServer</li>
<li>WebSocket</li>
<li>Swoole综合案例：PHP+Swoole多进程爬虫</li>
</ul>
</li>
</ul>
</li>
<li>Web API
<ul>
<li>BOM操作</li>
<li>DOM操作</li>
<li>事件处理</li>
<li>浏览器兼容性处理</li>
<li>页面动态效果</li>
<li>动画</li>
</ul>
</li>
<li>HTTP/HTTPS协议
<ul>
<li>HTTP协议概念</li>
<li>HTTP协议的特点</li>
<li>HTTP协议的分类</li>
<li>HTTP请求</li>
<li>HTTP响应</li>
<li>HTTP状态码</li>
<li>PHP模拟HTTP请求</li>
<li>扩展：HTTPS协议</li>
</ul>
</li>
<li>Ajax
<ul>
<li>Ajax概述</li>
<li>Ajax对象</li>
<li>GET与POST请求</li>
<li>同步与异步概念</li>
<li>缓存问题</li>
<li>Ajax与XML</li>
<li>Ajax与JSON</li>
<li>封装Ajax框架</li>
<li>跨域请求</li>
<li>原生Ajax</li>
<li>jQuery的Ajax相关API使用</li>
<li>低层原理分析</li>
<li>缓存问题及处理方式</li>
<li>跨域请求及解决方法</li>
<li>实用案例</li>
</ul>
</li>
<li>VueJS
<ul>
<li>Vue概述</li>
<li>Vue指令</li>
<li>Vue属性</li>
<li>方法、事件、过滤器、事件处理、钩子函数</li>
<li>组件、动画、路由、API请求</li>
<li>常用系统指令</li>
<li>数据绑定</li>
<li>指令</li>
<li>过滤器</li>
<li>生命周期</li>
<li>组件化</li>
<li>Vue组件</li>
<li>Vue过渡效果(动画)</li>
<li>路由(vue-router库）</li>
<li>axios</li>
</ul>
</li>
<li>WAMP &amp; MAMP &amp; LAMP
<ul>
<li>WEB程序的访问流程</li>
<li>Apache</li>
<li>MySQL</li>
<li>PHP</li>
<li>配置虚拟主机</li>
</ul>
</li>
<li>设计模式
<ul>
<li>MVC</li>
<li>MVVM</li>
</ul>
</li>
<li>Git开发
<ul>
<li>命令行</li>
<li>git的基本使用</li>
<li>对比文件差异、还原、合并 ，回滚操作</li>
<li>远端仓库操作,使用github创建远端仓库，生成ssh key 并添加到github</li>
</ul>
</li>
<li>Linux操作系统
<ul>
<li>Linux系统概述</li>
<li>VMware虚拟机的安装</li>
<li>CentOS系统安装</li>
<li>Shell指令</li>
<li>VI编辑器</li>
<li>Linux内核分析</li>
<li>用户和组</li>
<li>文件操作</li>
<li>网络配置</li>
<li>FTP</li>
<li>LAMP部署</li>
</ul>
</li>
<li>Nginx服务器集群
<ul>
<li>Nginx概述</li>
<li>LNMP的安装与配置</li>
<li>缓存设置</li>
<li>压缩设置</li>
<li>负载均衡</li>
</ul>
</li>
<li>Memcache缓存设计
<ul>
<li>大型项目优化概述</li>
<li>Memcache软件的安装</li>
<li>Memcache指令详解</li>
<li>使用PHP操作Memcache</li>
<li>Memcache应用场景</li>
</ul>
</li>
<li>Redis 缓存\消息队列
<ul>
<li>Redis概述</li>
<li>Redis支持的数据类型</li>
<li>持久化功能</li>
<li>Redis主从模式</li>
<li>PHP操作Redis</li>
<li>消息队列</li>
<li>商城系统缓存设计与秒杀实现</li>
</ul>
</li>
<li>MongoDB (NoSQL数据库)
<ul>
<li>MongoDB概述</li>
<li>MongoDB进阶</li>
<li>MongoDB的权限机制</li>
<li>使用PHP操作MongoDB</li>
</ul>
</li>
<li>网站优化(MySQL高级优化)
<ul>
<li>MySQL优化概述</li>
<li>MySQL存储引擎</li>
<li>列类型的选择</li>
<li>数据库设计三范式与逆范式</li>
<li>执行计划</li>
<li>索引</li>
<li>分库分表技术</li>
</ul>
</li>
<li>网站优化(Sphinx,Xunsearch)
<ul>
<li>主从服务器的讲解</li>
<li>主从复制</li>
<li>读写分离实战</li>
</ul>
</li>
<li>网站优化(主从复制,读写分离)
<ul>
<li>Sphinx概述</li>
<li>安装Sphinx</li>
<li>使用PHP+API接口连接Sphinx</li>
<li>Sphinx的匹配模式</li>
<li>Sphinx增量索引</li>
</ul>
</li>
<li>网站优化(页面静态化)
<ul>
<li>页面静态化技术简介</li>
<li>真静态</li>
<li>伪静态</li>
</ul>
</li>
<li>Laravel框架
<ul>
<li>Laravel概述</li>
<li>Laravel的安装</li>
<li>目录分析</li>
<li>控制器</li>
<li>路由</li>
<li>视图</li>
<li>HTTP请求与响应</li>
<li>数据库</li>
<li>模型</li>
<li>Laravel实用项</li>
<li>Redis数据库</li>
<li>消息队列</li>
</ul>
</li>
<li>Laravel +VueJS 在线直播平台
<ul>
<li>前端界面开发</li>
<li>Laravel后台程序设计</li>
<li>Socket编程</li>
<li>Redis集群</li>
<li>ffmpeg转码</li>
<li>VOD点播</li>
<li>CDN加速</li>
<li>HLS技术</li>
<li>在线教育平台实战</li>
</ul>
</li>
<li>Canvas绘图
<ul>
<li>canvas概述</li>
<li>绘图</li>
<li>echarts</li>
<li>svg</li>
<li>svg图标的使用</li>
</ul>
</li>
<li>移动Web开发(响应式设计)
<ul>
<li>移动端屏幕介绍</li>
<li>移动端浏览器介绍</li>
<li>移动端操作系统介绍</li>
<li>Chrome模拟调试</li>
<li>真机调试</li>
<li>Viewport</li>
<li>rem</li>
<li>触屏touch事件</li>
<li>手势封装</li>
<li>媒体查询,设备尺寸划分</li>
<li>主流响应式布局框架</li>
<li>移动端框架</li>
<li>bootstrap</li>
<li>iScroll</li>
<li>swiper</li>
<li>fastclick</li>
<li>zepto</li>
<li>framework7</li>
<li>Canvas</li>
<li>Sass</li>
<li>vw</li>
<li>CSS预处理器LESS</li>
</ul>
</li>
<li>前端模块化
<ul>
<li>AMD</li>
<li>CMD</li>
<li>模块化开发基本概念</li>
<li>模块化演变过程分析</li>
<li>设计规范</li>
<li>RequireJS</li>
<li>淘宝的SeaJS</li>
</ul>
</li>
<li>NodeJS详解
<ul>
<li>NodeJS历史</li>
<li>发展</li>
<li>特征与现状</li>
<li>ES6常用语法</li>
<li>同步与异步</li>
<li>环境安装</li>
<li>文件操作</li>
<li>网络操作</li>
<li>模块化思想及操作</li>
<li>npm</li>
<li>异步编程</li>
<li>Express</li>
<li>工具模块</li>
<li>Web模块</li>
<li>全局对象</li>
</ul>
</li>
<li>Express框架
<ul>
<li>Express 简介</li>
<li>安装</li>
<li>请求与响应</li>
<li>路由</li>
<li>静态文件</li>
<li>文件上传</li>
<li>Cookiet管理</li>
</ul>
</li>
<li>AngularJS实战开发
<ul>
<li>单页应用</li>
<li>MVC</li>
<li>常用指令</li>
<li>双向绑定和单向绑定</li>
<li>模块</li>
<li>控制器controller</li>
<li>$watch</li>
<li>自定义指令</li>
<li>jqLite</li>
<li>过滤器</li>
<li>数据过滤</li>
<li>服务$http $location</li>
<li>前端路由</li>
<li>http拦截器</li>
</ul>
</li>
<li>ReactJS实战开发
<ul>
<li>快速入门</li>
<li>虚拟DOM</li>
<li>交互与动态UI</li>
<li>数据渲染</li>
<li>JSX 语法</li>
<li>组件开发</li>
<li>组件复用</li>
<li>生命周期</li>
<li>React操作dom元素</li>
<li>React绝对路由</li>
<li>webpack和gulp集成构建项目</li>
<li>flux</li>
<li>redux</li>
<li>state props context 等</li>
<li>附加模块</li>
<li>集成工具</li>
<li>重定向组件</li>
<li>代理方式进行跨域</li>
<li>按需加载</li>
</ul>
</li>
<li>移动端项目  (全栈必备)
<ul>
<li>mui框架使用</li>
<li>前端校验插件</li>
<li>echarts数据可视化</li>
<li>Ajax进度条组件</li>
<li>模板引擎渲染</li>
<li>图片上传插件</li>
</ul>
</li>
<li>后台项目  (全栈必备)
<ul>
<li>后端渲染页面，使用会话技术实现登录，PHP操作MySQL数据库，开发接口，使用AJAX技术，模板引擎ArtTemplate完成页面功能的实现</li>
</ul>
</li>
<li>vue项目 (全栈必备)
<ul>
<li>webpack</li>
<li>vue-cli</li>
<li>vuex</li>
<li>打包发布</li>
<li>组件开发</li>
<li>权限管理</li>
<li>外部接口调用</li>
</ul>
</li>
<li>微服务Docker (PHP进阶)
<ul>
<li>Docker概述</li>
<li>为什么需要Docker</li>
<li>Docker环境开发流程</li>
<li>Docker安装与配置</li>
<li>Docker指令</li>
<li>DockerFile应用服务器</li>
</ul>
</li>
<li>Swoole聊天室 (PHP进阶)
<ul>
<li>Swoole概述</li>
<li>Server</li>
<li>Client</li>
<li>Process</li>
<li>AsyncIO</li>
<li>Memory</li>
<li>HttpServer</li>
<li>WebSocket</li>
<li>PHP+Swoole聊天室</li>
</ul>
</li>
<li>微信开发（微擎/ EasyWechat）
<ul>
<li>微信公众平台概述</li>
<li>微信开发前期准备</li>
<li>微信6大接收接口</li>
<li>微信6大回复接口</li>
<li>微信LBS接口开发</li>
<li>微信机器人开发</li>
<li>响应式设计</li>
<li>微擎/EasyWechat</li>
<li>微信综合案例</li>
</ul>
</li>
<li>微信小程序 (前端进阶)
<ul>
<li>微信框架</li>
<li>小程序界面设计</li>
<li>API接口设计</li>
<li>小程序数据绑定</li>
<li>小程序性能优化与实践</li>
<li>小程序入门概念及演示</li>
<li>小程序开发工具介绍与创建quick_start项目</li>
<li>小程序文件结构</li>
<li>wxml</li>
<li>wxss</li>
<li>常用组件(view,image,text,navigator,swiper等)</li>
<li>小程序常用api</li>
</ul>
</li>
<li>微信公众号 (前端进阶)
<ul>
<li>用JS-SDK技术做分享、拍照、支付、登录等功能。</li>
</ul>
</li>
</ul></li>
</ul>
<hr>
<h1>知识拓展</h1>
<p><strong>这里是在进行全栈涉及知识点时,我本人进行百度到的各种知识拓展,方便大家学习</strong></p>
<ul>
<li><ul>
<li>
<p>前后端分离</p>
<ul>
<li>目前市面上都是前后端分离</li>
<li>主要目的是 解耦 分离架构.</li>
<li>前后端使用JSON交流,后端架构语言如何选择将和前端没有关系</li>
<li>听说 TDD (Test-driven development，测试驱动开发) 可以改善代码的质量，我们便实施了 TDD；接着，听说 BDD (Behavior-driven development，行为驱动开发) 可以交付符合业务需求的软件，我们便实施了 BDD；后来，听说 DDD (Domain-driven design，领域驱动设计) 可以分离业务代码与基础代码，我们便实施了 DDD。今天，听说了前后端分离很流行，于是我们就实施了前后端分离——这就是传说中的 HDD（Hype-driven Development，热闹驱动开发）</li>
<li>前后端只通过 JSON 来交流，组件化、工程化不需要依赖后端去实现。</li>
<li>前后端分离和微服务一样，渐渐地影响了新的大型系统的架构。微服务和前后端分离要解决是类似的问题，解耦——可以解耦复杂的业务逻辑，解耦架构。可要是说相像吧，消息队伍和前后端便相似一些，通过传递数据的形式来解耦组件。</li>
</ul>
</li>
<li>
<p>TCP/IP 协议</p>
<ul>
<li>TCP/IP协议簇是Internet的基础，也是当今最流行的组网形式。TCP/IP是一组协议的代名词，包括许多别的协议，组成了TCP/IP协议簇。其中比较重要的有SLIP协议、PPP协议、IP协议、ICMP协议、ARP协议、TCP协议、UDP协议、FTP协议、DNS协议、SMTP协议等。</li>
</ul>
</li>
<li>
<p>HTTP协议</p>
<ul>
<li>阅读 图解HTTP</li>
</ul>
</li>
<li>
<p>OSI参考模型</p>
<ul>
<li>OSI（Open System Interconnect），即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互联模型。该体系结构标准定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层和应用层），即ISO开放系统互连参考模型。在这一框架下进一步详细规定了每一层的功能，以实现开放系统环境中的互连性、互操作性和应用的可移植性。</li>
</ul>
</li>
<li>
<p>web service 服务端应用</p>
<ul>
<li>
<p>webService 三要素</p>
<ul>
<li>SOAP、WSDL(WebServicesDescriptionLanguage)、UDDI(UniversalDescriptionDiscovery andIntegration)之一， soap用来描述传递信息的格式， WSDL 用来描述如何访问具体的接口， uddi用来管理，分发，查询webService 。具体实现可以搜索 Web Services简单实例 ; SOAP 可以和现存的许多因特网协议和格式结合使用，包括超文本传输协议（HTTP），简单邮件传输协议（SMTP），多用途网际邮件扩充协议（MIME）。它还支持从消息系统到远程过程调用（RPC）等大量的应用程序。SOAP使用基于XML的数据结构和超文本传输协议(HTTP)的组合定义了一个标准的方法来使用Internet上各种不同操作环境中的分布式对象。</li>
<li>SMTP 隶属于 TCP/IP协议</li>
</ul>
</li>
<li><p>Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。 [1]<br>
Web Service技术， 能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件， 就可相互交换数据或集成。依据Web Service规范实施的应用之间， 无论它们所使用的语言、 平台或内部协议是什么， 都可以相互交换数据。Web Service是自描述、 自包含的可用网络模块， 可以执行具体的业务功能。Web Service也很容易部署， 因为它们基于一些常规的产业标准以及已有的一些技术，诸如标准通用标记语言下的子集XML、HTTP。Web Service减少了应用接口的花费。Web Service为整个企业甚至多个组织之间的业务流程的集成提供了一个通用机制。</p></li>
<li>
<p>web广泛用到的技术：<br>
.   TCP/IP：通用网络协议，被各种设备使用</p>
<p>.   HTML（标准通用标记语言下的一个应用）：通用用户界面，可以使用HTML标签显示数据</p>
<p>.   .NET: 不同应用程序间共享数据与数据交换</p>
<p>.   Java：写一次可以在任何系统运行的通用编程语言，因为java具有跨平台特性</p>
<p>.   XML（标准通用标记语言下的一个子集）：通用数据表达语言，在web上传送结构化数据的容易方法</p>
</li>
</ul>
</li>
<li>
<p>Apache Nginx IIS &gt;服务器软件</p>
<ul>
<li>
<p>Apache</p>
<ul>
<li>Apache是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将Perl/Python等解释器编译到服务器中。</li>
<li>Apache HTTP服务器是一个模块化的服务器，源于NCSAhttpd服务器，经过多次修改，成为世界使用排名第一的Web服务器软件。</li>
</ul>
</li>
<li>
<p>Nginx</p>
<ul>
<li>Nginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。<br>
其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。<br>
Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</li>
</ul>
</li>
<li>
<p>IIS</p>
<ul>
<li>iis是Internet Information Services的缩写，意为互联网信息服务，是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。最初是Windows NT版本的可选包，随后内置在Windows 2000、Windows XP Professional和Windows Server 2003一起发行，但在Windows XP Home版本上并没有IIS。IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。 [1]<br>
IIS的安全脆弱性曾长时间被业内诟病，一旦IIS出现远程执行漏洞威胁将会非常严重。远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码，可以导致IIS服务器所在机器蓝屏或读取其内存中的机密数据。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>web server 网页端服务器</p>
<ul>
<li>Web服务器一般指网站服务器，是指驻留于因特网上某种类型计算机的程序，可以向浏览器等Web客户端提供文档， [1]  也可以放置网站文件，让全世界浏览；可以放置数据文件，让全世界下载。目前最主流的三个Web服务器是Apache Nginx IIS。</li>
</ul>
</li>
<li>
<p>Weblogic Tomcat Jboss &gt; 应用服务器</p>
<ul>
<li>
<p>weblogic</p>
<ul>
<li>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。<br>
WebLogic是美商Oracle的主要产品之一，是并购BEA得来。是商业市场上主要的Java（J2EE）应用服务器软件（application server）之一，是世界上第一个成功商业化的J2EE应用服务器, 已推出到12c(12.2.1.3) 版。而此产品也延伸出WebLogic Portal，WebLogic Integration等企业用的中间件（但当下Oracle主要以Fusion Middleware融合中间件来取代这些WebLogic Server之外的企业包），以及OEPE(Oracle Enterprise Pack for Eclipse)开发工具。</li>
</ul>
</li>
<li>
<p>Tomcat</p>
<ul>
<li>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。<br>
Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</li>
</ul>
</li>
<li>
<p>Jboss</p>
<ul>
<li>是一个基于J2EE的开放源代码的应用服务器。 JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB 1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>RESTful API交互（如jQuery Ajax，Fetch API，ReactiveX）</p>
<ul>
<li>Fetch API (新一代HTML请求方式)</li>
<li>ReactiveX (响应式编程)
<ul>
<li>ReactiveX 是一个基于一系列可观察的异步和基础事件编程组成的一个库。<br>
它继承观察者模式，支持序列数据或者事件。更高级的用法允许你将如下的一些抽象概念操作一起联合使用，比如低线程，同步，线程安全，数据并发，非阻塞I/O流。<br>
它通常被称为“函数响应式编程”，这是用词不当的。ReactiveX 可以是函数式的，可以是响应式的，但是和“函数响应式编程”是不同的概览。一个主要的不同点是“函数响应式编程”是对随着时间不停变化的值进行操作的，而ReactiveX是对超时提交产生的离散值上。</li>
<li>ReactiveX 简称 Rx，全称 Reactive Extensions，最初是LINQ的一个扩展，由微软的架构师Erik Meijer领导的团队开发，在2012年11月开源，Rx是一个编程模型，目标是提供一致的编程接口，帮助开发者更方便的处理异步数据流，Rx库支持.NET、JavaScript和C++，Java等几乎所有的编程语言。Rx扩展了观察者模式用于支持数据和事件序列，添加了一些操作符，它让你可以声明式的组合这些序列，而无需关注底层的实现：如线程、同步、线程安全、并发数据结构和非阻塞IO。</li>
<li>Reactive: 响应式</li>
<li>LINQ: Language Integrated Query的简称，它是集成在.NET编程语言中的一种特性。已成为编程语言的一个组成部分，在编写程序时可以得到很好的编译时语法检查，丰富的元数据，智能感知、 静态类型等强类型语言的好处。<br>
迭代器模式：核心思想是：通过定义遍历或查看对象中所有元素的方法的接口，并根据不同的类进行不同的方法实现相，已达到对类数据遍历的抽象以及对类内部如何获取数据的过程进行掩盖的目的。当于Java中的Iterator（迭代器）有它的继承接口如ListIterator和它的实现类等，我们在遍历Set、Map时，用到他们的Iterator，这样，他们具体怎么拿出数据的过程，我们不用知道。</li>
<li>观察者模式：有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。【下面RxJava的使用过程就是观察者模式的体现】</li>
<li>Rx = Observables【用于表示异步数据流】 + LINQ【用它的操作符查询异步数据流】 + Schedules【参数化异步数据流的并发处理】</li>
<li>Rx用到的设计模式精华：观察者模式、迭代器模式</li>
</ul>
</li>
</ul>
</li>
<li>
<p>MVC &amp; MVVM (设计模式)</p>
<ul>
<li>阅读 设计模式相关书籍</li>
<li>针对不同语言有着不同定义.</li>
<li>最典型的MVC就是JSP + servlet + javabean的模式</li>
</ul>
</li>
<li>
<p>I/O (输入输出)</p>
<ul>
<li>I/O（input/output），即输入/输出端口。每个设备都会有一个专用的I/O地址，用来处理自己的输入输出信息。CPU与外部设备、存储器的连接和数据交换都需要通过接口设备来实现，前者被称为I/O接口，而后者则被称为存储器接口。存储器通常在CPU的同步控制下工作，接口电路比较简单；而I/O设备品种繁多，其相应的接口电路也各不相同，因此，习惯上说到接口只是指I/O接口。</li>
</ul>
</li>
<li>
<p>C/S &amp; B/S</p>
<ul>
<li>B/S
<ul>
<li>B/S结构（Browser/Server，浏览器/服务器模式），是WEB兴起后的一种网络结构模式，WEB浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器（Browser英 ['braʊzə]美 ['braʊzɚ]），如Netscape Navigator或Internet Explorer，服务器安装SQL Server、Oracle、MYSQL等数据库。浏览器通过Web Server 同数据库进行数据交互。</li>
</ul>
</li>
<li>C/S
<ul>
<li>Client/Server结构(C/S结构)是大家熟知的客户机和服务器结构。它是软件系统体系结构，通过它可以充分利用两端硬件环境的优势，将任务合理分配到Client端和Server端来实现，降低了系统的通讯开销。目前大多数应用软件系统都是Client/Server形式的两层结构，由于现在的软件应用系统正在向分布式的Web应用发展，Web和Client/Server 应用都可以进行同样的业务处理，应用不同的模块共享逻辑组件；因此，内部的和外部的用户都可以访问新的和现有的应用系统，通过现有应用系统中的逻辑可以扩展出新的应用系统。这也就是目前应用系统的发展方向。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>SOA 面向服务架构</p>
<ul>
<li>面向服务的架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</li>
</ul>
</li>
<li>
<p>J2EE 架构</p>
<ul>
<li>J2EE（Java 2 Platform, Enterprise Edition）是一个为大企业主机级的计算类型而设计的Java平台。Sun微系统（与其工业伙伴一起，例如IBM）设计了J2EE，以此来简化在受客户级环境下的应用开发。由于创造了标准的可重用模块组件以及由于构建出能自动处理编程中多方面问题的等级结构，J2EE简化了应用程序的开发，也降低了对编程和对受训的程序员的要求。</li>
<li>J2EE是一套全然不同于传统应用开发的技术架构，包含许多组件，主要可简化且规范应用系统的开发与部署，进而提高可移植性、安全与再用价值。<br>
J2EE核心是一组技术规范与指南，其中所包含的各类组件、服务架构及技术层次，均有共同的标准及规格，让各种依循J2EE架构的不同平台之间，存在良好的兼容性，解决过去企业后端使用的信息产品彼此之间无法兼容，企业内部或外部难以互通的窘境。<br>
J2EE组件和“标准的” Java类的不同点在于：它被装配在一个J2EE应用中，具有固定的格式并遵守J2EE规范，由J2EE服务器对其进行管理。J2EE规范是这样定义J2EE组件的：客户端应用程序和applet是运行在客户端的组件；Java Servlet和Java Server Pages (JSP) 是运行在服务器端的Web组件；Enterprise Java Bean (EJB )组件是运行在服务器端的业务组件。</li>
</ul>
</li>
<li><p>路由概念 (网络层)</p></li>
<li>
<p>微服务</p>
<ul>
<li>在介绍微服务时，首先得先理解什么是微服务，顾名思义，微服务得从两个方面去理解，什么是"微"、什么是"服务"， 微 狭义来讲就是体积小、著名的"2 pizza 团队"很好的诠释了这一解释（2 pizza 团队最早是亚马逊 CEO Bezos提出来的，意思是说单个服务的设计，所有参与人从设计、开发、测试、运维所有人加起来 只需要2个披萨就够了 ）。 而所谓服务，一定要区别于系统，服务一个或者一组相对较小且独立的功能单元，是用户可以感知最小功能集。</li>
<li>微服务可以在“自己的程序”中运行，并通过“轻量级设备与HTTP型API进行沟通”。关键在于该服务可以在自己的程序中运行。通过这一点我们就可以将服务公开与微服务架构（在现有系统中分布一个API）区分开来。在服务公开中，许多服务都可以被内部独立进程所限制。如果其中任何一个服务需要增加某种功能，那么就必须缩小进程范围。在微服务架构中，只需要在特定的某种服务中增加所需功能，而不影响整体进程。</li>
<li>为什么需要微服务<br>
在传统的IT行业软件大多都是各种独立系统的堆砌，这些系统的问题总结来说就是扩展性差，可靠性不高，维护成本高。到后面引入了SOA服务化，但是，由于 SOA 早期均使用了总线模式，这种总线模式是与某种技术栈强绑定的，比如：J2EE。这导致很多企业的遗留系统很难对接，切换时间太长，成本太高，新系统稳定性的收敛也需要一些时间。最终 SOA 看起来很美，但却成为了企业级奢侈品，中小公司都望而生畏。</li>
</ul>
</li>
<li>
<p>Spring (面向接口开源框架)</p>
<ul>
<li>Spring是一个开放源代码的设计层面框架，他解决的是业务逻辑层和其他各层的松耦合问题，因此它将面向接口的编程思想贯穿整个系统应用。Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson创建。简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</li>
</ul>
</li>
<li>
<p>RESTful (软件架构风格)</p>
<ul>
<li>一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</li>
</ul>
</li>
<li>
<p>授权（如HTTP Basic、JWT等等）</p>
<ul>
<li>JWT
<ul>
<li>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</li>
</ul>
</li>
<li>HTTP Basic
<ul>
<li>Basic Auth是开放平台的两种认证方式，简单点说明就是每次请求API时都提供用户的username和password。</li>
</ul>
</li>
<li>OAuth
<ul>
<li>OAuth为用户资源的授权提供了一个安全、开放的标准，将会是以后开发平台普遍遵守的，目前Twitter、Sina微博、豆瓣、Google等都提供对它的支持。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>wget &amp; curl Linux常用命令</p>
<ul>
<li>curl
<ul>
<li>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</li>
</ul>
</li>
<li>wget
<ul>
<li>wget 是一个从网络上自动下载文件的自由工具，支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP协议 下载，并可以使用 HTTP 代理。"wget" 这个名称来源于 “World Wide Web” 与 “get” 的结合。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>php-fpm ∈ FastCGI (通用网关接口) (php处理进程的)</p>
<ul>
<li>
<p>php-fpm</p>
<ul>
<li>PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)是一个PHPFastCGI管理器，对于PHP 5.3.3之前的php来说，是一个补丁包 [1]  ，旨在将FastCGI进程管理整合进PHP包中。如果你使用的是PHP5.3.3之前的PHP的话，就必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。<br>
相对Spawn-FCGI，PHP-FPM在CPU和内存方面的控制都更胜一筹，而且前者很容易崩溃，必须用crontab进行监控，而PHP-FPM则没有这种烦恼。</li>
</ul>
</li>
<li>
<p>FastCGI</p>
<ul>
<li>CGI全称是“通用网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序一般运行在网络服务器上。 CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等。</li>
<li>FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次(这是CGI最为人诟病的fork-and-execute 模式)。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。<br>
FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail- Over特性等等。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Ruby 面向对象语言</p>
<ul>
<li>Ruby，一种简单快捷的面向对象（面向对象程序设计）脚本语言，在20世纪90年代由日本人松本行弘(Yukihiro Matsumoto)开发，遵守GPL协议和Ruby License。它的灵感与特性来自于 Perl、Smalltalk、Eiffel、Ada以及 Lisp 语言。由 Ruby 语言本身还发展出了JRuby（Java平台）、IronRuby（.NET平台）等其他平台的 Ruby 语言替代品。Ruby的作者于1993年2月24日开始编写Ruby，直至1995年12月才正式公开发布于fj（新闻组）。因为Perl发音与6月诞生石pearl（珍珠）相同，因此Ruby以7月诞生石ruby（红宝石）命名。</li>
</ul>
</li>
<li>
<p>perl  一门脚本语言</p>
<ul>
<li>Perl，一种功能丰富的计算机程序语言，运行在超过100种计算机平台上，适用广泛，从大型机到便携设备，从快速原型创建到大规模可扩展开发。 [1]<br>
Perl最初的设计者为拉里·沃尔（Larry Wall），于1987年12月18日发表。现在的版本为Perl 6，于2015年12月25日更新。<br>
Perl借取了C、sed、awk、shell 脚本语言以及很多其他程序语言的特性，其中最重要的特性是它内部集成了正则表达式的功能，以及巨大的第三方代码库CPAN。简而言之，Perl像C一样强大，像awk、sed等脚本描述语言一样方便，被Perl语言爱好者称之为“一种拥有各种语言功能的梦幻脚本语言”、“Unix 中的王牌工具”。<br>
Perl 一般被称为“实用报表提取语言”（Practical Extraction and Report Language），你也可能看到“perl”，所有的字母都是小写的。一般，“Perl”，有大写的 P，是指语言本身，而“perl”，小写的 p，是指程序运行的解释器。</li>
</ul>
</li>
<li>
<p>Java SE /EE /ME (java语言分类)</p>
<ul>
<li>Java SE=Java Standard Edition<br>
Java EE=Java Enterprise Edition<br>
Java ME=Java Mobile Edition</li>
</ul>
<p>SE主要用于桌面程序,控制台开发(JFC)<br>
EE企业级开发(JSP,EJB)<br>
ME嵌入式开发(手机,小家电)</p>
</li>
<li>
<p>less &amp; sass  CSS扩展语言</p>
<ul>
<li>less
<ul>
<li>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。Less 可以运行在 Node 或浏览器端。</li>
</ul>
</li>
<li>sass
<ul>
<li><p>Sass 扩展了 CSS3，增加了规则、变量、混入、选择器、继承等等特性。Sass 生成良好格式化的 CSS 代码，易于组织和维护。<br>
SASS是对CSS3（层叠样式表）的语法的一种扩充，它可以使用巢状、混入、选择子继承等功能，可以更有效有弹性的写出Stylesheet。Sass最后还是会编译出合法的CSS让浏览可以使用，也就是说它本身的语法并不太容易让浏览器识别（虽然它和CSS的语法非常的像，几乎一样），因为它不是标准的CSS格式，在它的语法内部可以使用动态变量等，所以它更像一种极简单的动态语言。</p></li>
<li><p>SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。<br>
假定你已经安装好了Ruby，接着在命令行输入下面的命令：<br>
gem install sass<br>
然后，就可以使用了。</p></li>
</ul>
</li>
</ul>
</li>
<li>
<p>JSP (java服务器页面)</p>
<ul>
<li>JSP全名为Java Server Pages，中文名叫java服务器页面，其根本是一个简化的Servlet设计，它 [1]  是由Sun Microsystems公司倡导、许多公司参与一起建立的一种动态网页技术标准。JSP技术有点类似ASP技术，它是在传统的网页HTML（标准通用标记语言的子集）文件(<em>.htm,</em>.html)中插入Java程序段(Scriptlet)和JSP标记(tag)，从而形成JSP文件，后缀名为(*.jsp)。 用JSP开发的Web应用是跨平台的，既能在Linux下运行，也能在其他操作系统上运行。<br>
它实现了Html语法中的java扩展（以 &lt;%, %&gt;形式）。JSP与Servlet一样，是在服务器端执行的。通常返回给客户端的就是一个HTML文本，因此客户端只要有浏览器就能浏览。<br>
JSP技术使用Java编程语言编写类XML的tags和scriptlets，来封装产生动态网页的处理逻辑。网页还能通过tags和scriptlets访问存在于服务端的资源的应用逻辑。JSP将网页逻辑与网页设计的显示分离，支持可重用的基于组件的设计，使基于Web的应用程序的开发变得迅速和容易。 JSP(JavaServer Pages)是一种动态页面技术，它的主要目的是将表示逻辑从Servlet中分离出来。<br>
Java Servlet是JSP的技术基础，而且大型的Web应用程序的开发需要Java Servlet和JSP配合才能完成。JSP具备了Java技术的简单易用，完全的面向对象，具有平台无关性且安全可靠，主要面向因特网的所有特点。</li>
</ul>
</li>
<li>
<p>ES6 / CoffeScript / TypeScript 转译语言</p>
<ul>
<li>ES6
<ul>
<li>ES6是ECMAScript标准十余年来变动最大的一个版本，其中添加了许多新的语法特性，既有大家耳熟能详的Promise，也有闻所未闻的Proxy代理和Reflection反射；既有可以通过转译器（Transpiler）等方式在旧版本浏览器中实现兼容的let、const、不定参数、展开运算符等功能，亦有无论如何都无法实现向前兼容的尾调用优化。深入理解ES6的特性对于所有JavaScript开发者而言至关重要，在可预见的未来，ES6中引入的语言特性会成为JavaScript应用程序的主流特性</li>
</ul>
</li>
<li>coffeScript
<ul>
<li>CoffeeScript是一套JavaScript的转译语言，创建者 Jeremy Ashkenas 戏称它是- JavaScript 的不那么铺张的小兄弟。因为 CoffeeScript 会将类似 Ruby 语法的代码编译成 JavaScript，而且大部分结构都相似，但不同的是 CoffeeScript 拥有更严格的语法。</li>
</ul>
</li>
<li>TypeScript
<ul>
<li>是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。安德斯·海尔斯伯格，C#的首席架构师，已工作于TypeScript的开发。2012年十月份，微软发布了首个公开版本的TypeScript，2013年6月19日，在经历了一个预览版之后微软正式发布了正式版TypeScript 0.9，向未来的TypeScript 1.0版迈进了很大一步。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>YAML语言</p>
<ul>
<li>YAML是“YAML不是一种记语言”的外语缩写 [1]  （见前方参考资料原文内容）；但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。它是一种直观的能够被电脑识别的数据序列化格式，是一个可读性高并且容易被人类阅读，容易和脚本语言交互，用来表达资料序列的编程语言。<br>
它是类似于标准通用标记语言的子集XML的数据描述语言，语法比XML简单很多。</li>
<li>使用场景
<ul>
<li><p>脚本语言<br>
由于实现简单，解析成本很低，YAML特别适合在脚本语言中使用。列一下现有的语言实现：Ruby，Java，Perl，Python，PHP，OCaml，JavaScript，Go 除了Java 和 Go，其他都是脚本语言。</p></li>
<li><p>配置文件<br>
YAML做配置文件也不错。写YAML要比写XML快得多(无需关注标签或引号)，并且比ini文档功能更强。<br>
比如Ruby on Rails的配置就选用的YAML。对ROR而言，这很自然，也很省事.<br>
由于兼容性问题，不同语言间的数据流转建议不要用YAML.</p></li>
<li><p>序列化<br>
YAML比较适合做序列化。因为它是宿主语言数据类型直转的。</p></li>
</ul>
</li>
</ul>
</li>
<li>
<p>DOM (网页文档对象)</p>
<ul>
<li>文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM。Document Object Model的历史可以追溯至1990年代后期微软与Netscape的“浏览器大战”，双方为了在JavaScript与JScript一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有VBScript、ActiveX、以及微软自家的DHTML格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM即是当时蕴酿出来的杰作。</li>
</ul>
</li>
<li>
<p>ajax 前端处理方式</p>
<ul>
<li>Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。<br>
Ajax = 异步 JavaScript 和 XML（标准通用标记语言的子集）。<br>
Ajax 是一种用于创建快速动态网页的技术。<br>
Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</li>
<li>
</li>
</ul>
<p>XMLHttpRequest 是 AJAX 的基础。<br>
XmlHttpRequest 术语缩写为XHR，中文可以解释为可扩展超文本传输请求。</p>
<p>XMLHttpRequest 对象可以在不向服务器提交整个页面的情况下，实现局部更新网页。</p>
<ul>
<li>简单来说就是网络请求,然后响应以后使用JavaScript操作DOM</li>
</ul>
</li>
<li>
<p>数据格式（如JSON、XML）</p>
<ul>
<li>JSON (轻量级的数据交换格式)
<ul>
<li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。它基于 ECMAScript (w3c制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
</li>
<li>XML (工作几乎不用)
<ul>
<li>可扩展标记语言，标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。<br>
在电子计算机中，标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种的信息比如文章等。它可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 它非常适合万维网传输，提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。是Internet环境中跨平台的、依赖于内容的技术，也是当今处理分布式结构信息的有效工具。早在1998年，W3C就发布了XML1.0规范，使用它来简化Internet的文档信息传输。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>构建系统（gulp、grunt、webpack等等）</p>
<ul>
<li>gulp &amp; grunt  (前端构建工具) &amp; npm (NodeJS包管理和分发工具)
<ul>
<li>npm
<ul>
<li>NPM的全称是Node Package Manager ，是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准。<br>
如果你熟悉ruby的gem，Python的pypi、setuptools，PHP的pear，那么你就知道NPM的作用是什么了。<br>
Nodejs自身提供了基本的模块，但是开发实际应用过程中仅仅依靠这些基本模块则还需要较多的工作。幸运的是，Nodejs库和框架为我们提供了帮助，让我们减少工作量。但是成百上千的库或者框架管理起来又很麻烦，有了NPM，可以很快的找到特定服务要使用的包，进行下载、安装以及管理已经安装的包。</li>
</ul>
</li>
<li>gulp
<ul>
<li>Gulp基于Node.js的前端构建工具，通过Gulp的插件可以实现前端代码的编译（sass、less）、压缩、测试；图片的压缩；浏览器自动刷新，还有许多强大的插件可以在这里查找。比起Grunt不仅配置简单而且更容易阅读和维护</li>
</ul>
</li>
<li>grunt
<ul>
<li>Grunt基于Node.js，安装之前要先安装Node.js。</li>
<li>例如压缩、编译、单元测试、代码检查等，自动化工具可以减轻你的劳动，简化你的工作。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>代码质量（如JSLint / ESLint / TSLint / CSLint）</p>
<ul>
<li>JSLint &amp; CSSLint &amp; TSLint (静态代码分析) &amp;CodeClimate(代码质量分析)  (工程化)
<ul>
<li>JSLint
<ul>
<li>JSLint定义了一组编码约定，这比ECMA定义的语言更为严格。这些编码约定汲取了多年来的丰富编码经验，并以一条年代久远的编程原则 作为宗旨：能做并不意味着应该做。JSLint会对它认为有的编码实践加标志，另外还会指出哪些是明显的错误，从而促使你养成好的 JavaScript编码习惯。</li>
</ul>
</li>
<li>CSSLint</li>
<li>TSLint</li>
</ul>
</li>
</ul>
</li>
<li>
<p>安全性（如跨域）</p>
<ul>
<li>跨域一词从字面意思看，就是跨域名嘛，但实际上跨域的范围绝对不止那么狭隘。具体概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域。之所以会产生跨域这个问题呢，其实也很容易想明白，要是随便引用外部文件，不同标签下的页面引用类似的彼此的文件，浏览器很容易懵逼的，安全也得不到保障了就。什么事，都是安全第一嘛。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦。所以我们要通过一些方法使本域的js能够操作其他域的页面对象或者使其他域的js能操作本域的页面对象（iframe之间）。</li>
</ul>
</li>
<li>
<p>网页设计</p>
<ul>
<li>切页面</li>
<li>Flexbox布局</li>
<li>网格布局（Grid Layout）</li>
<li>响应式设计</li>
<li>线框图（Wireframe）</li>
<li>矢量图形 / 矢量图形动画（如SVG）
<ul>
<li>可缩放矢量图形是基于可扩展标记语言（标准通用标记语言的子集），用于描述二维矢量图形的一种图形格式。它由万维网联盟制定，是一个开放标准。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>常用前端三驾马车 react、vuejs、angularjs jQuery工具库</p>
<ul>
<li>
<p>Node.js Javascript运行环境(runtime)</p>
<ul>
<li>Node.js是一个Javascript运行环境(runtime)，发布于2009年5月，由Ryan Dahl开发，实质是对Chrome V8引擎进行了封装。Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好。<br>
V8引擎执行Javascript的速度非常快，性能非常好。 [1]  Node.js是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。</li>
</ul>
</li>
<li>
<p>jQuery JS框架</p>
<ul>
<li>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</li>
</ul>
</li>
<li>
<p>React (Facebook内部项目)</p>
<ul>
<li>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设Instagram 的网站。做出来以后，发现这套东西很好用，就在2013年5月开源了。</li>
<li>React主要用于构建UI。你可以在React里传递多种类型的参数，如声明代码，帮助你渲染出UI、也可以是静态的HTML DOM元素、也可以传递动态变量、甚至是可交互的应用组件。</li>
</ul>
</li>
<li>
<p>AngularJS</p>
<ul>
<li>AngularJS [1]  诞生于2009年，由Misko Hevery 等人创建，后为Google所收购。是一款优秀的前端JS框架，已经被用于Google的多款产品当中。AngularJS有着诸多特性，最为核心的是：MVW（Model-View-Whatever）、模块化、自动化双向数据绑定、语义化标签、依赖注入等等。<br>
AngularJS 是一个 JavaScript框架。它是一个以 JavaScript 编写的库。它可通过 &lt;script&gt; 标签添加到HTML 页面。<br>
AngularJS 通过 指令 扩展了 HTML，且通过 表达式 绑定数据到 HTML。<br>
AngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>bootstrap 前端框架</p>
<ul>
<li><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。 [1]  它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。 [2]  国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来。</p></li>
<li>
<p>在2017年8月下旬，Bootstrap四周岁之际，Bootstrap团队发布了Bootstrap 4 alpha版，4的最主要变化包括以下方面：<br>
从 Less 迁移到 Sass</p>
<pre><code>  改进网格系统

  缺省弹性框支持

  Dropped wells, thumbnails, and panels for cards

  合并所有 HTML resets 到一个新的模块中：Reboot

  全新自定义选项

  不再支持 IE8

  重写所有的 JavaScript 插件

  改进工具提示和 popovers 的自动定位

  改进文档

  其他大量改进
</code></pre>
</li>
</ul>
</li>
<li>
<p>WeX5 多端部署工具</p>
<ul>
<li>WeX5遵循Apache开源协议，完全开源免费，上百个组件框架，全部开放，可视化的组件框架，开发者可自定义组件，集成第三方组件，采用MVC设计模式，数据和视图分离，页面描述和代码逻辑分离，支持浏览器调试、真机调试、原生调试，等多种调试模式，开发者可掌握每一行代码。<br>
WeX5一直坚持采用H5+CSS3+JS标准技术，一次开发，多端任意部署，确保开发者成果始终通用、不受限制。WeX5的混合应用开发模式能轻松调用手机设备，如相机、地图、通讯录等，让开发者轻松应对各类复杂数据应用，代码量减少80%。同时开发出的应用能够媲美原生的运行体验。</li>
</ul>
</li>
<li><p>express &amp; koa (nodeJS框架)</p></li>
<li>
<h2>swig (nodejs前端模板引擎)</h2>
</li>
<li>
<p>技能</p>
<ul>
<li><p>CSS / CSS3 动画</p></li>
<li><p>能封装业务组件和公用组件.</p></li>
<li><p>JavaScript 动画</p></li>
<li><p>Web字体嵌入</p></li>
<li><p>Icon 字体</p></li>
<li><p>图形和图表</p></li>
<li><p>CSS / SVG  Sprite（如glue）</p></li>
<li><p>DOM操作（如jQuery、React等等）</p></li>
<li>
<p>模板引擎（如JSX、Handlebars、JSP、Mustache等等）</p>
<ul>
<li>
<p>JSX</p>
<ul>
<li>JSX是阵营的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言，一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。</li>
</ul>
</li>
<li>
<p>JSP</p>
<ul>
<li>JSP技术使用Java编程语言编写类XML的tags和scriptlets，来封装产生动态网页的处理逻辑。网页还能通过tags和scriptlets访问存在于服务端的资源的应用逻辑。JSP将网页逻辑与网页设计的显示分离，支持可重用的基于组件的设计，使基于Web的应用程序的开发变得迅速和容易。 JSP(JavaServer Pages)是一种动态页面技术，它的主要目的是将表示逻辑从Servlet中分离出来。</li>
</ul>
</li>
<li>
<p>Handlebars</p>
<ul>
<li>Handlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。它采用"Logic-less template"（无逻辑模版）的思路，在加载时被预编译，而不是到了客户端执行到代码时再去编译， 这样可以保证模板加载和运行的速度。Handlebars兼容Mustache，你可以在Handlebars中导入Mustache模板。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>调试</p>
<ul>
<li>浏览器调试</li>
<li>Debug工具</li>
<li>Wireshark / Charles抓包</li>
<li>远程设备调试（如Chrome Inspect Devices）</li>
<li>单元测试</li>
<li>服务测试</li>
<li>UI测试</li>
<li>集成测试</li>
</ul>
</li>
<li><p>版本管理（如git、svn）</p></li>
<li><p>PHP页面跳转、端口监听</p></li>
<li><p>依赖管理</p></li>
<li><p>包管理（如npm、bower）</p></li>
<li>
<p>模块化（如CommonJS、WebPack）</p>
<ul>
<li>
<p>commonJS</p>
<ul>
<li>CommonJS API定义很多普通应用程序（主要指非浏览器的应用）使用的API，从而填补了这个空白。它的终极目标是提供一个类似Python，Ruby和Java标 准库。这样的话，开发者可以使用CommonJS API编写应用程序，然后这些应用可以运行在不同的JavaScript解释器和不同的主机环境中。在兼容CommonJS的系统中，你可以使用 JavaScript程序开发</li>
</ul>
</li>
<li>
<p>WebPack</p>
<ul>
<li>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</li>
<li>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。<br>
Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。</li>
</ul>
<p>Grunt和Gulp的工作流程<br>
Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p>
<ul>
<li>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>自动构建（脚本）</p></li>
<li><p>前端工程化开发测试 打包 发布</p></li>
<li><p>前端性能优化.</p></li>
<li><p>在技术选型上,能给出你选择的方案是最优的数据说明</p></li>
</ul>
</li>
<li>
<p>兼容性</p>
<ul>
<li>跨浏览器测试 （Chrome，IE，Firefox，Safari等等）</li>
<li>跨平台测试（Windows、GNU/Linux，Mac OS等等）</li>
<li>跨设备测试（Desktop，Android，iOS，Windows Phone）</li>
<li>跨版本测试（同一个浏览器的不同版本）</li>
</ul>
</li>
<li>
<p>正规表达式</p>
<ul>
<li>正规表达式由一个或多个字符型文字和/或元字符组成。在最简单的格式下，正规表达式仅由字符文字组成，如正规表达式 cat。它被读作字母 c，接着是字母 a 和 t，这种模式匹配 cat、location 和 catalog 之类的字符串。可以用它们验证数据、识别重复关键字的出现、检测不必要的空格、分析字符串、验证电话号码、邮政编码、电子邮件地址、社会安全号码、IP 地址、文件名和路径名等的格式，也可以查找如 HTML 标记、数字、日期之类的模式，或任意文本数据中符合任意模式的任何事物，并用其它的模式来替换它们。</li>
</ul>
</li>
<li>
<p>性能与优化</p>
<ul>
<li>可用性</li>
<li>性能测试（特别是移动Web</li>
<li>加载优化（如gzip压缩、缓存等等</li>
<li>PageSpeed / Yslow 优化
<ul>
<li>Page Speed最 初是Google内部使用的改进网页设计的工具——它整合在Firefox的著名插件Firebug中。当用户运行Page Speed，可以立即获得如何改进网页载入速度的建议。</li>
</ul>
</li>
<li>压缩（如Minify、Uglify、CleanCSS等等）
<ul>
<li>CleanCSS是一个免费的CSS精简压缩工具，通过这个在线工具，可以将你的CSS文件压缩、优化成更精简，这将大大提高你的网站的载入速度。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>SEO</p>
<ul>
<li>SEO
<ul>
<li>SEO（Search Engine Optimization）:汉译为搜索引擎优化。搜索引擎优化是一种利用搜索引擎的搜索规则来提高目前网站在有关搜索引擎内的自然排名的方式。SEO的目的理解是：为网站提供生态式的自我营销解决方案，让网站在行业内占据领先地位，从而获得品牌收益；SEO包含站外SEO和站内SEO两方面；SEO是指为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，使网站更适合搜索引擎的索引原则的行为；使网站更适合搜索引擎的索引原则又被称为对搜索引擎优化，对搜索引擎优化不仅能够提高SEO的效果，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。</li>
</ul>
</li>
<li>Sitemap（站点地图）
<ul>
<li>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。最简单的 Sitemap 形式，就是XML 文件，在其中列出网站中的网址以及关于每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等），以便搜索引擎可以更加智能地抓取网站。</li>
</ul>
</li>
<li>页面静态内容生成
<ul>
<li>静态页面，即静态网页，是实际存在的，无需经过服务器的编译，直接加载到客户浏览器上显示出来。静态页面需要占一定的服务器空间，且不能自主管理发布更新的页面，如果想更新网页内容，要通过FTP软件把文件DOWN下来用网页制作软件修改（通过fso等技术例外）。常见的静态页面举例：.html扩展名的、.htm扩展名的。</li>
</ul>
</li>
<li>MicroData / MicroFormat
<ul>
<li>MicroData
<ul>
<li>Microdata 以自定义的词汇表（vocabulary）为中心，可以想象 HTML5 中所有的元素集合为一个词汇表，这个词汇表包含描述段落（section） 或文章（article）的元素，但是不包含描述事件（event） 或组织（organization）的元素。如果想在 Web 页面中表示一个事件或组织，则需要定义自己的词汇表，Microdata 允许你这么做，任何人都可以定义自己的词汇表，并且将其包含在自己的 Web 页面中。</li>
</ul>
</li>
<li>MicroFormat
<ul>
<li>微格式（Microformat），是通过语意相关让内容人机可读。网页上的允许的微格式数据包括事件、人物、地点等，它可以被其他的软件检测到，并提取出相应的信息，以及对信息进行索引、搜索、跨平台的参考，把这些信息以其他形式重复使用或组合。</li>
</ul>
</li>
</ul>
</li>
<li>内部链接建设</li>
</ul>
</li>
<li><p>面向对象 &amp; 面向过程</p></li>
<li>
<p>Laravel (PHP框架)</p>
<ul>
<li>Laravel是一套简洁、优雅的PHP Web开发框架(PHP Web Framework)。它可以让你从面条一样杂乱的代码中解脱出来；它可以帮你构建一个完美的网络APP，而且每行代码都可以简洁、富于表达力。<br>
在Laravel中已经具有了一套高级的PHP ActiveRecord实现 -- Eloquent ORM。它能方便的将“约束（constraints）”应用到关系的双方，这样你就具有了对数据的完全控制，而且享受到ActiveRecord的所有便利。Eloquent原生支持Fluent中查询构造器（query-builder）的所有方法。</li>
</ul>
</li>
<li><p>个人博客 HEXO</p></li>
<li>
<p>Java后台</p>
<ul>
<li>Java基础
<ul>
<li>阅读 Head First Java</li>
<li>掌握DOS系统常用基本命令</li>
</ul>
</li>
<li>面向对象
<ul>
<li>匿名对象</li>
<li>继承</li>
<li>多态</li>
<li>抽象类</li>
<li>接口</li>
<li>内部类</li>
</ul>
</li>
<li>异常
<ul>
<li>异常概述</li>
<li>异常分类</li>
<li>异常处理方案</li>
<li>自定义异常</li>
</ul>
</li>
<li>集合
<ul>
<li>Collection接口下的常用集合</li>
<li>Map接口下的常用集合</li>
<li>泛型</li>
<li>Iterator接口</li>
</ul>
</li>
<li>I/O
<ul>
<li>文件</li>
<li>字节流</li>
<li>字节缓冲流</li>
<li>转换流</li>
<li>序列化流</li>
</ul>
</li>
<li>多线程
<ul>
<li>多线程运行原理</li>
<li>多线程的实现方案</li>
<li>线程生命周期</li>
<li>线程同步</li>
<li>线程池</li>
</ul>
</li>
<li>网络编程
<ul>
<li>网络编程三要素</li>
<li>Socket原理机制</li>
<li>UDP传输</li>
<li>TCP传输</li>
</ul>
</li>
<li>反射
<ul>
<li>类加载机制原理</li>
<li>反射构造方法、字段、方法</li>
<li>Properties配置文件</li>
</ul>
</li>
<li>XML
<ul>
<li>XML基本语法</li>
<li>XML的约束</li>
<li>XML的解析</li>
<li>BeanUtils的使用</li>
</ul>
</li>
<li>注解及动态代理
<ul>
<li>注解的使用</li>
<li>自定义注解</li>
<li>动态代理Proxy</li>
<li>类加载器</li>
</ul>
</li>
<li>Mysql及JDBC开发
<ul>
<li>MySQL数据库</li>
<li>JDBC开发</li>
<li>连接池</li>
<li>DBUtils</li>
<li>JDBC事物管理</li>
</ul>
</li>
<li>前端技术
<ul>
<li>html</li>
<li>css</li>
<li>js</li>
<li>jQuery</li>
<li>BootStrap</li>
</ul>
</li>
<li>javaWeb核心
<ul>
<li>Tomcat</li>
<li>Servlet</li>
<li>Request和Response</li>
<li>Cookie和Session</li>
<li>jsp , el , jstl</li>
<li>Filter</li>
<li>Listener</li>
</ul>
</li>
<li>ajax应用
<ul>
<li>ajax</li>
<li>jQuery ajax</li>
<li>EasyUI</li>
</ul>
</li>
<li>linux和redis
<ul>
<li>Linux</li>
<li>Redis</li>
</ul>
</li>
<li>javaWeb应用
<ul>
<li>通用BaseServlet抽取</li>
<li>缓存技术</li>
<li>JavaMail</li>
<li>在线支付</li>
<li>文件上传</li>
<li>Linux项目部署</li>
<li>能够完成B/S结构网站开发，具备了真实环境的项目部署能力，能够完成中小型企业管理系统等传统项目的开发。</li>
</ul>
</li>
<li>框架
<ul>
<li>Hibernate5
<ul>
<li>hibernate.cfg.xml配置</li>
<li>hbm.xml映射文件详解</li>
<li>PO对象状态及状态的转换分析</li>
<li>Hibernate高级映射技术</li>
<li>Hibernate数据检索技术</li>
<li>Hibernate性能优化技术</li>
</ul>
</li>
<li>Struts2
<ul>
<li>struts.xml详解及使用</li>
<li>使用通配符定义action、动态方法调用</li>
<li>ActionContext及ServletActionContext使用</li>
<li>模型驱动ModelDriven、属性驱动.</li>
<li>默认拦截器分析、自定义拦截器</li>
<li>OGNL表达式、值栈ValueStack分析</li>
</ul>
</li>
<li>Spring
<ul>
<li>applicationContext.xml配置文件编写</li>
<li>IoC思想、DI依赖注入</li>
<li>使用AspectJ切面编程</li>
<li>JdbcTemplate模板使用</li>
<li>声明式事务管理</li>
<li>SSH整合</li>
</ul>
</li>
<li>CRM项目
<ul>
<li>使用struts2+spring4+hibernate5 +svn来开发项目</li>
<li>使用Jquery EasyUI进行布局</li>
<li>使用svn进行代码管理</li>
</ul>
</li>
<li>oracle
<ul>
<li>简单查询</li>
<li>oracle的常用函数</li>
<li>多表查询</li>
<li>集合操作</li>
<li>DDL操作管理表</li>
<li>DML管理数据</li>
<li>其它数据库对象</li>
<li>PL/SQL编程</li>
<li>存储过程与存储函数</li>
<li>触发器</li>
</ul>
</li>
<li>maven
<ul>
<li>maven介绍</li>
<li>maven安装</li>
<li>maven的入门程序</li>
<li>maven仓库</li>
<li>项目构建</li>
<li>依赖管理</li>
<li>maven综合案例</li>
<li>maven的私服</li>
</ul>
</li>
<li>mybatis框架
<ul>
<li>mybatis框架原理</li>
<li>mybatis入门案例</li>
<li>mybatis开发DAO方式</li>
<li>mybatis输入输出映射</li>
<li>动态sql</li>
<li>spring整合mybatis</li>
</ul>
</li>
<li>springmvc框架
<ul>
<li>springmvc框架原理</li>
<li>springmvc入门案例</li>
<li>springmvc整合mybatis</li>
<li>参数绑定</li>
<li>json数据交互</li>
<li>拦截器</li>
</ul>
</li>
<li>Lucene、solr框架
<ul>
<li>什么是全文检索</li>
<li>Lucene实现全文检索</li>
<li>Analyzer分析器</li>
<li>索引维护</li>
<li>solr安装配置</li>
<li>solr索引、solr搜索、SolrJ</li>
</ul>
</li>
</ul>
</li>
<li>综合项目技能
<ul>
<li>掌握Apache poi实现数据导入导出；</li>
<li>掌握图形报表的生成技术，如JfreeChart、HighChart、AmChart</li>
<li>掌握Apache Shiro技术</li>
<li>掌握BRAC认证模型，有效进行用户权限管理</li>
<li>SSH框架整合</li>
<li>使用maven进行项目的分模块开发</li>
<li>页面布局采用前端主流jQuery插件easyui</li>
<li>采用Redis实现缓存机制</li>
<li>采用Oracle数据库</li>
<li>引入WebService的CXF开发方式，并与Spring结合</li>
<li>采用了BRAC认证模型，有效进行用户权限管理，同时加入当前流行的Shiro安全框架，从而高效快捷保证系统安全可靠</li>
<li>加入了Quartz与spring整合实现定时任务调度</li>
<li>引入JavaMail邮件机制，并实现Spring与JavaMail整合开发</li>
<li>使用PowerDesigner建立企业级PDM模型</li>
<li>SSM框架整合</li>
<li>jsp+easyui视图层展现</li>
<li>KindEditor富文本编辑器应用</li>
<li>Freemarker模板引擎实现页面静态化</li>
<li>Dubbo分布式调用技术</li>
<li>Nginx反向代理</li>
<li>Redis缓存</li>
<li>Lucene/Solr全文检索解决方案</li>
<li>FastDFS图片服务器</li>
<li>ActivieMQ消息队列</li>
<li>maven项目管理</li>
<li>svn/git实现项目代码和文档管理</li>
<li>zookeeper分布式协调服务</li>
<li>mycat中间件</li>
</ul>
</li>
<li>分布式事物</li>
<li>分布式查询</li>
<li>微服务</li>
<li>高并发</li>
<li>容灾</li>
<li>容器化</li>
</ul>
</li>
</ul></li>
</ul>